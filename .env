# --- realm/import ---
AUTH_DEBUG=1
REALM=OSSS
IMPORT_STRATEGY=OVERWRITE_EXISTING
RESET_REALM=0
KC_SKIP_ADMIN_ROLE_CHECK=1

# --- public (safe to expose to browser) ---
NEXT_PUBLIC_KEYCLOAK_BASE=http://localhost:8085
NEXT_PUBLIC_KEYCLOAK_REALM=OSSS
NEXT_PUBLIC_KEYCLOAK_CLIENT_ID=osss-web
NEXT_PUBLIC_PUBLIC_URL=http://localhost:3000
POST_LOGOUT_REDIRECT_URI=http://localhost:3000/

# --- misc ---
REQUESTS_DEBUG=1
CALLBACK_URL=http://localhost:8081/callback

# ================== FASTAPI (server) ==================
# Keep API bound to the confidential 'osss-api' client
KEYCLOAK_SERVER_URL=http://localhost:8085
KEYCLOAK_PUBLIC_URL=http://localhost:8085
KEYCLOAK_BASE_URL=http://localhost:8085
KEYCLOAK_ALLOWED_AUDIENCES=osss-api,osss-web
KEYCLOAK_REALM=OSSS
KEYCLOAK_CLIENT_ID=osss-api
# If your osss-api client is confidential, set secret; otherwise leave empty
KEYCLOAK_CLIENT_SECRET=password
KEYCLOAK_AUDIENCE=osss-api

JWKS_CACHE_SECONDS=600
REQUIRE_AZP_MATCH=false

DATABASE_URL="postgresql+asyncpg://osss:password@localhost:5433/osss"
# POSTGRES_DB=osss
# POSTGRES_USER=osss
# POSTGRES_PASSWORD=password

# OSSS DB
OSSS_DB_URL="postgresql+asyncpg://osss:password@localhost:5433/osss"
OSSS_DB_HOST="127.0.0.1"        # or osss_postgres if your API runs in Docker
OSSS_DB_PORT="5433"
OSSS_DB_NAME="osss"
OSSS_DB_USER="osss"
OSSS_DB_PASSWORD="password"

# Alembic (sync)
ALEMBIC_DATABASE_URL=postgresql+psycopg2://osss:password@localhost:5433/osss


# Keycloak DB (separate creds/port)
KC_DB=postgres
KC_DB_HOST=kc_postgres
KC_DB_PORT=5432
KC_DB_NAME=keycloak
KC_DB_USERNAME=keycloak
KC_DB_PASSWORD=keycloakpass

# --- Keycloak bootstrap admin (for logging into Keycloak) ---
KEYCLOAK_ADMIN=admin
KEYCLOAK_ADMIN_PASSWORD=admin

SWAGGER_CLIENT_ID="osss-api"
SWAGGER_CLIENT_SECRET="password"


POST_LOGOUT_REDIRECT_URI=http://localhost:3000/

REDIS_URL=redis://localhost:6379
REDIS_VERSION="-7-alpine"

SESSION_SECRET="a-very-long-random-string-change-this-once"
SESSION_MAX_AGE="1209600"
SESSION_TTL_SECONDS=604800
COOKIE_DOMAIN="localhost"
COOKIE_SECURE="false"
COOKIE_SAMESITE="lax"




OSSS_DEBUG_MAPPINGS=1

OSSS_GOOGLE_CLIENT_ID=...
OSSS_GOOGLE_CLIENT_SECRET=...
OSSS_GOOGLE_OAUTH_REDIRECT_URI=https://your-host/api/google/callback
OSSS_GOOGLE_PROJECT_ID=...
# (optional DWD)
OSSS_GOOGLE_SA_JSON_PATH=/secrets/your-sa.json
OSSS_GOOGLE_WORKSPACE_IMPERSONATE=admin@district.org
# (optional Pub/Sub push)
OSSS_PUBSUB_VERIFICATION_TOKEN=something-random
GC_SCOPES="https://www.googleapis.com/auth/classroom.courses https://www.googleapis.com/auth/classroom.rosters"
CORS_ORIGINS=

PM_GEN_LOG_LEVEL=DEBUG
PM_GEN_LOG_ROWS=1
PM_GEN_LOG_INDEX=1
DV_LOG_LEVEL=DEBUG
DV_SQL_ECHO=1
PM_GEN_SQL_ECHO=1

USERS_LOG_LEVEL="DEBUG"
USERS_LOG_SQL="1"

OSSS_LOG_LEVEL="DEBUG"

# Keycloak realm issuer (NO trailing slash)
OIDC_ISSUER="http://localhost:8085/realms/OSSS"

# JWKS endpoint so we can fetch the signing keys (must be reachable from the API process)
OIDC_JWKS_URL="$OIDC_ISSUER/protocol/openid-connect/certs"

# Your client id (should match the 'aud' your token uses)
OIDC_CLIENT_ID="osss-api"

# Often off for Keycloak because the 'aud' is not always what you expect
OIDC_VERIFY_AUD=0

JWT_SECRET="super-dev-secret"        # same secret used to sign your HS256 token
JWT_ALLOWED_ALGS="RS256,HS256"

INTEGRATION_AUTH=1
