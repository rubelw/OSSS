version: "3.8"

volumes:
  kc_postgres_data:
  osss_postgres_data:
  redis-data:

services:
  app:
    profiles: ["app"]
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
    depends_on:
      - kc_postgres
      - osss_postgres
  osss_postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${OSSS_DB_NAME}
      POSTGRES_USER: ${OSSS_DB_USER}
      POSTGRES_PASSWORD: ${OSSS_DB_PASSWORD}
    ports: [ "5433:5432" ]
    volumes:
      - osss_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${OSSS_DB_USER:-osss} -d ${OSSS_DB_NAME:-osss} -h 127.0.0.1 -p 5432 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 20

  kc_postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ${KC_DB_NAME}
      POSTGRES_USER: ${KC_DB_USERNAME}
      POSTGRES_PASSWORD: ${KC_DB_PASSWORD}
    volumes:
      - kc_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${OSSS_DB_USER:-osss} -d ${OSSS_DB_NAME:-osss} -h 127.0.0.1 -p 5432 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s
    restart: always
  redis:
    image: redis:7-alpine
    command: [ "redis-server", "--appendonly", "yes" ]
    ports:
      - "6379:6379"        # optional for host access; containers use 'redis:6379'
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped
  keycloak:
    build:
      context: .          # folder that contains Dockerfile + init-and-start.sh
      dockerfile: docker/keycloak/Dockerfile
    # ⬇️ hard limits for the container (compose)
    mem_limit: 1g         # container RAM
    cpus: 1               # container vCPUs
    environment:
      KC_DB: ${KC_DB}
      KC_DB_URL: jdbc:postgresql://${KC_DB_HOST}:${KC_DB_PORT}/${KC_DB_NAME}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      # Optional but nice:
      KC_HEALTH_ENABLED: "true"
      KC_HOSTNAME: localhost
      KC_DB_SCHEMA: public
      REALM: OSSS
      IMPORT_STRATEGY: OVERWRITE_EXISTING
      RESET_REALM: "1"   # set to "0" to skip deletion
      # Give the import more time (default is often too low for big group trees)
      QUARKUS_TRANSACTION_MANAGER_DEFAULT_TRANSACTION_TIMEOUT: "600"   # seconds

      # DB connection pool headroom (avoid pool starvation during import)
      KC_DB_POOL_INITIAL_SIZE: "20"
      KC_DB_POOL_MIN_SIZE: "20"
      KC_DB_POOL_MAX_SIZE: "50"

      # runtime env form (keep it)
      QUARKUS_HIBERNATE_ORM_PERSISTENCE_XML_IGNORE: "true"
      # also append a JVM -D for the build/augmentation phase
      JAVA_OPTS_APPEND: "-Dquarkus.hibernate-orm.persistence-xml.ignore=true"
      # (optional) extra logging to see what’s happening
      KC_LOG_LEVEL: "info,org.keycloak:DEBUG,org.hibernate:INFO,io.quarkus:DEBUG"
    volumes:
      - ./realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
    ports:
      - "8085:8080"
    depends_on:
      kc_postgres:
        condition: service_healthy
    restart: always