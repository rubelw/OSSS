
Project OSSS {
  database_type: "PostgreSQL"
  Note: 'Schema derived from discussed Alembic migrations and routers.'
}

Table organizations {
  id uuid [pk, default: `gen_random_uuid()`]
  name text [not null, unique]
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  Note: 'Top-level tenant/district container for scoping data.'
}

Table districts {
  id uuid [pk, default: `gen_random_uuid()`]
  name text [not null, unique]
  code text [unique]
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  Note: 'Reference table for districts; may mirror organizations conceptually.'
}

Table schools {
  id uuid [pk, default: `gen_random_uuid()`]
  organization_id uuid [not null, ref: > organizations.id]
  name text [not null]
  school_code text
  nces_school_id text
  building_code text
  type text
  timezone text

  Note: 'Schools within an organization (district).'
}

Table bodies {
  id uuid [pk, default: `gen_random_uuid()`]
  org_id uuid [not null, ref: > organizations.id]
  name text [not null]
  type text
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  Note: 'Boards/committees/councils under an organization.'
}

Table meetings {
  id uuid [pk, default: `gen_random_uuid()`]
  org_id uuid [not null, ref: > organizations.id]
  body_id uuid [ref: > bodies.id] // on delete set null (documented)
  title text [not null]
  starts_at timestamptz [not null]
  ends_at timestamptz
  location text
  status text // draft/published/cancelled
  is_public boolean [not null, default: true]
  stream_url text
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  Indexes {
    (org_id) [name: 'ix_meetings_org']
    (body_id) [name: 'ix_meetings_body']
  }

  Note: 'Formal gatherings linked to a body and org; optionally public with livestream.'
}

Table calendars {
  id uuid [pk, default: `gen_random_uuid()`]
  school_id uuid [not null, ref: > schools.id]
  name text [not null]
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  Note: 'Named instructional calendars for a school (e.g., Student Days, Staff Workdays).'
}

Table academic_terms {
  id uuid [pk, default: `gen_random_uuid()`]
  school_id uuid [not null, ref: > schools.id]
  name text [not null]
  type text // semester, quarter, trimester, session, year
  start_date date [not null]
  end_date date [not null]
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  Note: 'High-level term container (semester/trimester/year) per school.'
}

Table grading_periods {
  id uuid [pk, default: `gen_random_uuid()`]
  term_id uuid [not null, ref: > academic_terms.id]
  name text [not null]
  start_date date [not null]
  end_date date [not null]
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  Note: 'Sub-term reporting windows (quarters, progress periods).'
}

Table plans {
  id uuid [pk, default: `gen_random_uuid()`]
  name text [not null]
  // add other fields from your schema as needed

  Note: 'Plan container (e.g., SIP/MTSS/IEP plan).'
}

Table goals {
  id uuid [pk, default: `gen_random_uuid()`]
  plan_id uuid [not null, ref: > plans.id] // on delete cascade
  name text [not null]
  description text

  Note: 'Goals linked to a plan.'
}

Table tags {
  id uuid [pk, default: `gen_random_uuid()`]
  name text [not null]
  slug text [unique]
  color text
  description text
  org_id uuid // optional scoping to organization
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]

  Note: 'Reusable labels; consider uniqueness per org if org_id used.'
}

Table entity_tags {
  entity_type text [not null]
  entity_id uuid [not null]
  tag_id uuid [not null, ref: > tags.id] // on delete cascade

  Indexes {
    (entity_type, entity_id, tag_id) [pk]
  }

  Note: 'Polymorphic tagging table; composite PK prevents duplicate tag assignments.'
}

Table users {
  id uuid [pk, default: `gen_random_uuid()`]
  email text [not null, unique]
  // ... other identity fields

  Note: 'System users; referenced by audit logs.'
}

Table audit_log {
  id uuid [pk, default: `gen_random_uuid()`]
  entity_type text [not null]
  entity_id uuid [not null]
  action text [not null] // created/updated/deleted/published/etc.
  actor_id uuid [ref: > users.id] // nullable
  at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  delta jsonb

  Indexes {
    (entity_type, entity_id) [name: 'ix_audit_log_entity']
  }

  Note: 'Append-only event log of changes across entities.'
}

Table states {
  code char(2) [pk]
  name text [not null]

  Note: 'US States reference table.'
}

Table behavior_codes {
  code text [pk]
  description text [not null]

  Note: 'SIS behavior/discipline codes.'
}


Table policies {
  id uuid [pk, default: `gen_random_uuid()`]
  org_id uuid [not null, ref: > organizations.id]
  code varchar(64)
  title varchar(255) [not null]
  status varchar(32) [not null, default: 'active']

  Indexes {
    (org_id) [name: 'ix_policies_org']
  }

  Note: 'High-level policy container scoped to an organization.'
}

Table policy_versions {
  id uuid [pk, default: `gen_random_uuid()`]
  policy_id uuid [not null, ref: > policies.id]
  version_no int [not null, default: 1]
  content text
  effective_date date
  supersedes_version_id uuid [ref: > policy_versions.id] // self-referential
  created_by uuid [ref: > users.id]
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  Indexes {
    (policy_id) [name: 'ix_policy_versions_policy']
  }

  Note: 'Versioned content for a policy, with optional effective date and supersession.'
}

Table policy_legal_refs {
  id uuid [pk, default: `gen_random_uuid()`]
  policy_version_id uuid [not null, ref: > policy_versions.id]
  citation varchar(255) [not null]
  url varchar(1024)

  Note: 'Legal citations or references tied to a policy version.'
}

Table policy_comments {
  id uuid [pk, default: `gen_random_uuid()`]
  policy_version_id uuid [not null, ref: > policy_versions.id]
  user_id uuid [ref: > users.id] // nullable, SET NULL on delete
  text text [not null]
  visibility varchar(16) [not null, default: 'public'] // public|private
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  Indexes {
    (policy_version_id) [name: 'ix_policy_comments_version']
  }

  Note: 'Comments or annotations on a policy version.'
}

Table policy_workflows {
  id uuid [pk, default: `gen_random_uuid()`]
  policy_id uuid [not null, ref: > policies.id]
  name varchar(255) [not null]
  active boolean [not null, default: true]

  Note: 'Approval workflows configured per policy.'
}

Table policy_workflow_steps {
  id uuid [pk, default: `gen_random_uuid()`]
  workflow_id uuid [not null, ref: > policy_workflows.id]
  step_no int [not null]
  approver_type varchar(20) [not null] // e.g. role, group, user
  approver_id uuid // optional explicit approver
  rule varchar(50)

  Note: 'Ordered steps within a policy workflow.'
}

Table policy_approvals {
  id uuid [pk, default: `gen_random_uuid()`]
  policy_version_id uuid [not null, ref: > policy_versions.id]
  step_id uuid [not null, ref: > policy_workflow_steps.id]
  approver_id uuid [ref: > users.id]
  decision varchar(16) // approved/denied/pending
  decided_at timestamptz
  comment text

  Note: 'Individual approval decisions tied to a workflow step.'
}

Table policy_publications {
  policy_version_id uuid [pk, ref: > policy_versions.id]
  published_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  public_url varchar(1024)
  is_current boolean [not null, default: false]

  Note: 'Publication metadata for policy versions.'
}


Table policy_files {
  policy_version_id uuid [not null, ref: > policy_versions.id]
  file_id uuid [not null, ref: > files.id]

  Indexes {
    (policy_version_id, file_id) [pk]
  }

  Note: 'Join table linking policy versions to uploaded files.'
}


  Note: 'Join table linking policy versions to uploaded files.'
}

Table policy_search_index {
  policy_id uuid [pk, ref: > policies.id]
  ts tsvector

  Indexes {
    (ts) [name: 'ix_policy_search_gin', type: gin]
  }

  Note: 'Full-text search index on policies.'
}
