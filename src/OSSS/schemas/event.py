# Auto-generated by OSSS.schemas.codegen â€” DO NOT EDIT BY HAND
from __future__ import annotations
from typing import Dict, Any, Literal
from datetime import datetime
import uuid

from pydantic import Field, model_validator
from OSSS.schemas.base import APIModel


EventStatus = Literal["draft", "published", "cancelled"]  # sa.String(16) w/ default 'draft'


class EventOut(APIModel):
    school_id: uuid.UUID
    activity_id: uuid.UUID | None = None
    title: str
    summary: str | None = None
    starts_at: datetime
    ends_at: datetime | None = None
    venue: str | None = Field(None, max_length=255)
    status: EventStatus
    attributes: Dict[str, Any] | None = None
    created_at: datetime
    updated_at: datetime
    id: uuid.UUID


class _EventTimeValidator(APIModel):
    starts_at: datetime | None = None
    ends_at: datetime | None = None

    @model_validator(mode="after")
    def _validate_times(self):
        if self.starts_at and self.ends_at and self.ends_at < self.starts_at:
            raise ValueError("ends_at must be greater than or equal to starts_at")
        return self


class EventCreate(_EventTimeValidator):
    school_id: uuid.UUID
    activity_id: uuid.UUID | None = None
    title: str = Field(..., max_length=255)
    summary: str | None = None
    starts_at: datetime
    ends_at: datetime | None = None
    venue: str | None = Field(None, max_length=255)
    # DB default is 'draft'; allow omit on create
    status: EventStatus | None = None
    attributes: Dict[str, Any] | None = None


class EventReplace(_EventTimeValidator):
    school_id: uuid.UUID
    activity_id: uuid.UUID | None = None
    title: str = Field(..., max_length=255)
    summary: str | None = None
    starts_at: datetime
    ends_at: datetime | None = None
    venue: str | None = Field(None, max_length=255)
    status: EventStatus | None = None
    attributes: Dict[str, Any] | None = None


class EventPatch(_EventTimeValidator):
    school_id: uuid.UUID | None = None
    activity_id: uuid.UUID | None = None
    title: str | None = Field(None, max_length=255)
    summary: str | None = None
    starts_at: datetime | None = None
    ends_at: datetime | None = None
    venue: str | None = Field(None, max_length=255)
    status: EventStatus | None = None
    attributes: Dict[str, Any] | None = None


class EventList(APIModel):
    items: list[EventOut]
    total: int | None = None
    skip: int = 0
    limit: int = 100
