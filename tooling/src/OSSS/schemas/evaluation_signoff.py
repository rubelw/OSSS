from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass EvaluationSignoffBase(BaseModel):\n    note: Optional[str] = Field(None)\n    assignment_id: Any = Field(...)\n    signer_id: Any = Field(...)\n    signed_at: datetime = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EvaluationSignoffCreate(BaseModel):\n    note: Optional[str] = Field(None)\n    assignment_id: Any = Field(...)\n    signer_id: Any = Field(...)\n    signed_at: datetime = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EvaluationSignoffUpdate(BaseModel):\n    note: Optional[str] = Field(None)\n    assignment_id: Optional[Any] = Field(...)\n    signer_id: Optional[Any] = Field(...)\n    signed_at: Optional[datetime] = Field(...)\n    id: Optional[Any] = Field(...)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EvaluationSignoffRead(BaseModel):\n    note: Optional[str] = Field(None)\n    assignment_id: Any = Field(...)\n    signer_id: Any = Field(...)\n    signed_at: datetime = Field(...)\n    id: Any = Field(...)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n