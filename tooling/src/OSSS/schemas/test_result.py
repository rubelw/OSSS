from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass TestResultBase(BaseModel):\n    administration_id: Any = Field(...)\n    student_id: Any = Field(...)\n    scale_score: Optional[float] = Field(None)\n    percentile: Optional[float] = Field(None)\n    performance_level: Optional[str] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass TestResultCreate(BaseModel):\n    administration_id: Any = Field(...)\n    student_id: Any = Field(...)\n    scale_score: Optional[float] = Field(None)\n    percentile: Optional[float] = Field(None)\n    performance_level: Optional[str] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass TestResultUpdate(BaseModel):\n    administration_id: Optional[Any] = Field(...)\n    student_id: Optional[Any] = Field(...)\n    scale_score: Optional[float] = Field(None)\n    percentile: Optional[float] = Field(None)\n    performance_level: Optional[str] = Field(None)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    id: Optional[Any] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass TestResultRead(BaseModel):\n    administration_id: Any = Field(...)\n    student_id: Any = Field(...)\n    scale_score: Optional[float] = Field(None)\n    percentile: Optional[float] = Field(None)\n    performance_level: Optional[str] = Field(None)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n