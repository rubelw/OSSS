from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass AttendanceDailySummaryBase(BaseModel):\n    student_id: Any = Field(...)\n    date: date = Field(...)\n    present_minutes: int = Field(...)\n    absent_minutes: int = Field(...)\n    tardy_minutes: int = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass AttendanceDailySummaryCreate(BaseModel):\n    student_id: Any = Field(...)\n    date: date = Field(...)\n    present_minutes: int = Field(...)\n    absent_minutes: int = Field(...)\n    tardy_minutes: int = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass AttendanceDailySummaryUpdate(BaseModel):\n    student_id: Optional[Any] = Field(...)\n    date: Optional[date] = Field(...)\n    present_minutes: Optional[int] = Field(...)\n    absent_minutes: Optional[int] = Field(...)\n    tardy_minutes: Optional[int] = Field(...)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    id: Optional[Any] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass AttendanceDailySummaryRead(BaseModel):\n    student_id: Any = Field(...)\n    date: date = Field(...)\n    present_minutes: int = Field(...)\n    absent_minutes: int = Field(...)\n    tardy_minutes: int = Field(...)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n