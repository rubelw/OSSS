from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass CurriculumUnitBase(BaseModel):\n    curriculum_id: Any = Field(...)\n    title: str = Field(...)\n    order_index: int = Field(...)\n    summary: Optional[str] = Field(None)\n    metadata: Optional[Any] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass CurriculumUnitCreate(BaseModel):\n    curriculum_id: Any = Field(...)\n    title: str = Field(...)\n    order_index: int = Field(...)\n    summary: Optional[str] = Field(None)\n    metadata: Optional[Any] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass CurriculumUnitUpdate(BaseModel):\n    curriculum_id: Optional[Any] = Field(...)\n    title: Optional[str] = Field(...)\n    order_index: Optional[int] = Field(...)\n    summary: Optional[str] = Field(None)\n    metadata: Optional[Any] = Field(None)\n    id: Optional[Any] = Field(...)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass CurriculumUnitRead(BaseModel):\n    curriculum_id: Any = Field(...)\n    title: str = Field(...)\n    order_index: int = Field(...)\n    summary: Optional[str] = Field(None)\n    metadata: Optional[Any] = Field(None)\n    id: Any = Field(...)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n