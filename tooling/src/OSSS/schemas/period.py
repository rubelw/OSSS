from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass PeriodBase(BaseModel):\n    bell_schedule_id: Any = Field(...)\n    name: str = Field(...)\n    start_time: Any = Field(...)\n    end_time: Any = Field(...)\n    sequence: Optional[int] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass PeriodCreate(BaseModel):\n    bell_schedule_id: Any = Field(...)\n    name: str = Field(...)\n    start_time: Any = Field(...)\n    end_time: Any = Field(...)\n    sequence: Optional[int] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass PeriodUpdate(BaseModel):\n    bell_schedule_id: Optional[Any] = Field(...)\n    name: Optional[str] = Field(...)\n    start_time: Optional[Any] = Field(...)\n    end_time: Optional[Any] = Field(...)\n    sequence: Optional[int] = Field(None)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    id: Optional[Any] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass PeriodRead(BaseModel):\n    bell_schedule_id: Any = Field(...)\n    name: str = Field(...)\n    start_time: Any = Field(...)\n    end_time: Any = Field(...)\n    sequence: Optional[int] = Field(None)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n