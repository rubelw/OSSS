from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass EmbedBase(BaseModel):\n    provider: str = Field(...)\n    url: str = Field(...)\n    meta: Optional[Any] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EmbedCreate(BaseModel):\n    provider: str = Field(...)\n    url: str = Field(...)\n    meta: Optional[Any] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EmbedUpdate(BaseModel):\n    provider: Optional[str] = Field(...)\n    url: Optional[str] = Field(...)\n    meta: Optional[Any] = Field(None)\n    id: Optional[Any] = Field(...)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EmbedRead(BaseModel):\n    provider: str = Field(...)\n    url: str = Field(...)\n    meta: Optional[Any] = Field(None)\n    id: Any = Field(...)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n