from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass EducationAssociationBase(BaseModel):\n    name: str = Field(...)\n    contact: Optional[Any] = Field(None)\n    attributes: Optional[Any] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EducationAssociationCreate(BaseModel):\n    name: str = Field(...)\n    contact: Optional[Any] = Field(None)\n    attributes: Optional[Any] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EducationAssociationUpdate(BaseModel):\n    name: Optional[str] = Field(...)\n    contact: Optional[Any] = Field(None)\n    attributes: Optional[Any] = Field(None)\n    created_at: Optional[Any] = Field(None)\n    id: Optional[Any] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EducationAssociationRead(BaseModel):\n    name: str = Field(...)\n    contact: Optional[Any] = Field(None)\n    attributes: Optional[Any] = Field(None)\n    created_at: Optional[Any] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n