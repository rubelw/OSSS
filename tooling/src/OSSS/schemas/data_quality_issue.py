from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass DataQualityIssueBase(BaseModel):\n    entity_type: str = Field(...)\n    entity_id: Any = Field(...)\n    rule: str = Field(...)\n    severity: str = Field(...)\n    details: Optional[str] = Field(None)\n    detected_at: datetime = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass DataQualityIssueCreate(BaseModel):\n    entity_type: str = Field(...)\n    entity_id: Any = Field(...)\n    rule: str = Field(...)\n    severity: str = Field(...)\n    details: Optional[str] = Field(None)\n    detected_at: datetime = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass DataQualityIssueUpdate(BaseModel):\n    entity_type: Optional[str] = Field(...)\n    entity_id: Optional[Any] = Field(...)\n    rule: Optional[str] = Field(...)\n    severity: Optional[str] = Field(...)\n    details: Optional[str] = Field(None)\n    detected_at: Optional[datetime] = Field(...)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    id: Optional[Any] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass DataQualityIssueRead(BaseModel):\n    entity_type: str = Field(...)\n    entity_id: Any = Field(...)\n    rule: str = Field(...)\n    severity: str = Field(...)\n    details: Optional[str] = Field(None)\n    detected_at: datetime = Field(...)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n