from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass SectionMeetingBase(BaseModel):\n    section_id: Any = Field(...)\n    day_of_week: int = Field(...)\n    period_id: Optional[Any] = Field(None)\n    room_id: Optional[Any] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass SectionMeetingCreate(BaseModel):\n    section_id: Any = Field(...)\n    day_of_week: int = Field(...)\n    period_id: Optional[Any] = Field(None)\n    room_id: Optional[Any] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass SectionMeetingUpdate(BaseModel):\n    section_id: Optional[Any] = Field(...)\n    day_of_week: Optional[int] = Field(...)\n    period_id: Optional[Any] = Field(None)\n    room_id: Optional[Any] = Field(None)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    id: Optional[Any] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass SectionMeetingRead(BaseModel):\n    section_id: Any = Field(...)\n    day_of_week: int = Field(...)\n    period_id: Optional[Any] = Field(None)\n    room_id: Optional[Any] = Field(None)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n