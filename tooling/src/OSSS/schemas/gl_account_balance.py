from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass GlAccountBalanceBase(BaseModel):\n    account_id: Any = Field(...)\n    fiscal_period_id: Any = Field(...)\n    begin_balance: float = Field(...)\n    debit_total: float = Field(...)\n    credit_total: float = Field(...)\n    end_balance: float = Field(...)\n    attributes: Optional[Any] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass GlAccountBalanceCreate(BaseModel):\n    account_id: Any = Field(...)\n    fiscal_period_id: Any = Field(...)\n    begin_balance: float = Field(...)\n    debit_total: float = Field(...)\n    credit_total: float = Field(...)\n    end_balance: float = Field(...)\n    attributes: Optional[Any] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass GlAccountBalanceUpdate(BaseModel):\n    account_id: Optional[Any] = Field(...)\n    fiscal_period_id: Optional[Any] = Field(...)\n    begin_balance: Optional[float] = Field(...)\n    debit_total: Optional[float] = Field(...)\n    credit_total: Optional[float] = Field(...)\n    end_balance: Optional[float] = Field(...)\n    attributes: Optional[Any] = Field(None)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    id: Optional[Any] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass GlAccountBalanceRead(BaseModel):\n    account_id: Any = Field(...)\n    fiscal_period_id: Any = Field(...)\n    begin_balance: float = Field(...)\n    debit_total: float = Field(...)\n    credit_total: float = Field(...)\n    end_balance: float = Field(...)\n    attributes: Optional[Any] = Field(None)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n