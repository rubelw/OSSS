from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass ApprovalBase(BaseModel):\n    association_id: Any = Field(...)\n    approved_at: datetime = Field(...)\n    expires_at: Optional[datetime] = Field(None)\n    status: str = Field(...)\n    proposal_id: Any = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass ApprovalCreate(BaseModel):\n    association_id: Any = Field(...)\n    approved_at: datetime = Field(...)\n    expires_at: Optional[datetime] = Field(None)\n    status: str = Field(...)\n    proposal_id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass ApprovalUpdate(BaseModel):\n    association_id: Optional[Any] = Field(...)\n    approved_at: Optional[datetime] = Field(...)\n    expires_at: Optional[datetime] = Field(None)\n    status: Optional[str] = Field(...)\n    proposal_id: Optional[Any] = Field(...)\n    created_at: Optional[Any] = Field(None)\n    id: Optional[Any] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass ApprovalRead(BaseModel):\n    association_id: Any = Field(...)\n    approved_at: datetime = Field(...)\n    expires_at: Optional[datetime] = Field(None)\n    status: str = Field(...)\n    proposal_id: Any = Field(...)\n    created_at: Optional[Any] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n