from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass PolicyApprovalBase(BaseModel):\n    policy_version_id: Any = Field(...)\n    step_id: Any = Field(...)\n    approver_id: Optional[Any] = Field(None)\n    decision: Optional[str] = Field(None)\n    decided_at: Optional[datetime] = Field(None)\n    comment: Optional[str] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass PolicyApprovalCreate(BaseModel):\n    policy_version_id: Any = Field(...)\n    step_id: Any = Field(...)\n    approver_id: Optional[Any] = Field(None)\n    decision: Optional[str] = Field(None)\n    decided_at: Optional[datetime] = Field(None)\n    comment: Optional[str] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass PolicyApprovalUpdate(BaseModel):\n    policy_version_id: Optional[Any] = Field(...)\n    step_id: Optional[Any] = Field(...)\n    approver_id: Optional[Any] = Field(None)\n    decision: Optional[str] = Field(None)\n    decided_at: Optional[datetime] = Field(None)\n    comment: Optional[str] = Field(None)\n    id: Optional[Any] = Field(...)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass PolicyApprovalRead(BaseModel):\n    policy_version_id: Any = Field(...)\n    step_id: Any = Field(...)\n    approver_id: Optional[Any] = Field(None)\n    decision: Optional[str] = Field(None)\n    decided_at: Optional[datetime] = Field(None)\n    comment: Optional[str] = Field(None)\n    id: Any = Field(...)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n