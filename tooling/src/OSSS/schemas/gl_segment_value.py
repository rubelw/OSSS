from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass GLSegmentValueBase(BaseModel):\n    code: str = Field(...)\n    name: str = Field(...)\n    active: bool = Field(...)\n    segment_id: Any = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass GLSegmentValueCreate(BaseModel):\n    code: str = Field(...)\n    name: str = Field(...)\n    active: bool = Field(...)\n    segment_id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass GLSegmentValueUpdate(BaseModel):\n    code: Optional[str] = Field(...)\n    name: Optional[str] = Field(...)\n    active: Optional[bool] = Field(...)\n    segment_id: Optional[Any] = Field(...)\n    id: Optional[Any] = Field(...)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass GLSegmentValueRead(BaseModel):\n    code: str = Field(...)\n    name: str = Field(...)\n    active: bool = Field(...)\n    segment_id: Any = Field(...)\n    id: Any = Field(...)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n