from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass KPIDatapointBase(BaseModel):\n    note: Optional[str] = Field(None)\n    kpi_id: Any = Field(...)\n    as_of: date = Field(...)\n    value: float = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass KPIDatapointCreate(BaseModel):\n    note: Optional[str] = Field(None)\n    kpi_id: Any = Field(...)\n    as_of: date = Field(...)\n    value: float = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass KPIDatapointUpdate(BaseModel):\n    note: Optional[str] = Field(None)\n    kpi_id: Optional[Any] = Field(...)\n    as_of: Optional[date] = Field(...)\n    value: Optional[float] = Field(...)\n    id: Optional[Any] = Field(...)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass KPIDatapointRead(BaseModel):\n    note: Optional[str] = Field(None)\n    kpi_id: Any = Field(...)\n    as_of: date = Field(...)\n    value: float = Field(...)\n    id: Any = Field(...)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n