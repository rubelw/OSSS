from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass EvaluationQuestionBase(BaseModel):\n    section_id: Any = Field(...)\n    text: str = Field(...)\n    type: str = Field(...)\n    scale_min: Optional[int] = Field(None)\n    scale_max: Optional[int] = Field(None)\n    weight: Optional[float] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EvaluationQuestionCreate(BaseModel):\n    section_id: Any = Field(...)\n    text: str = Field(...)\n    type: str = Field(...)\n    scale_min: Optional[int] = Field(None)\n    scale_max: Optional[int] = Field(None)\n    weight: Optional[float] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EvaluationQuestionUpdate(BaseModel):\n    section_id: Optional[Any] = Field(...)\n    text: Optional[str] = Field(...)\n    type: Optional[str] = Field(...)\n    scale_min: Optional[int] = Field(None)\n    scale_max: Optional[int] = Field(None)\n    weight: Optional[float] = Field(None)\n    id: Optional[Any] = Field(...)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EvaluationQuestionRead(BaseModel):\n    section_id: Any = Field(...)\n    text: str = Field(...)\n    type: str = Field(...)\n    scale_min: Optional[int] = Field(None)\n    scale_max: Optional[int] = Field(None)\n    weight: Optional[float] = Field(None)\n    id: Any = Field(...)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n