from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass PMWorkGeneratorBase(BaseModel):\n    pm_plan_id: Any = Field(...)\n    last_generated_at: Optional[datetime] = Field(None)\n    lookahead_days: Optional[int] = Field(None)\n    attributes: Optional[Any] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass PMWorkGeneratorCreate(BaseModel):\n    pm_plan_id: Any = Field(...)\n    last_generated_at: Optional[datetime] = Field(None)\n    lookahead_days: Optional[int] = Field(None)\n    attributes: Optional[Any] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass PMWorkGeneratorUpdate(BaseModel):\n    pm_plan_id: Optional[Any] = Field(...)\n    last_generated_at: Optional[datetime] = Field(None)\n    lookahead_days: Optional[int] = Field(None)\n    attributes: Optional[Any] = Field(None)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    id: Optional[Any] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass PMWorkGeneratorRead(BaseModel):\n    pm_plan_id: Any = Field(...)\n    last_generated_at: Optional[datetime] = Field(None)\n    lookahead_days: Optional[int] = Field(None)\n    attributes: Optional[Any] = Field(None)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n