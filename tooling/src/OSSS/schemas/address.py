from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass AddressBase(BaseModel):\n    line1: str = Field(...)\n    line2: Optional[str] = Field(None)\n    city: str = Field(...)\n    state: Optional[str] = Field(None)\n    postal_code: Optional[str] = Field(None)\n    country: Optional[str] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass AddressCreate(BaseModel):\n    line1: str = Field(...)\n    line2: Optional[str] = Field(None)\n    city: str = Field(...)\n    state: Optional[str] = Field(None)\n    postal_code: Optional[str] = Field(None)\n    country: Optional[str] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass AddressUpdate(BaseModel):\n    line1: Optional[str] = Field(...)\n    line2: Optional[str] = Field(None)\n    city: Optional[str] = Field(...)\n    state: Optional[str] = Field(None)\n    postal_code: Optional[str] = Field(None)\n    country: Optional[str] = Field(None)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    id: Optional[Any] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass AddressRead(BaseModel):\n    line1: str = Field(...)\n    line2: Optional[str] = Field(None)\n    city: str = Field(...)\n    state: Optional[str] = Field(None)\n    postal_code: Optional[str] = Field(None)\n    country: Optional[str] = Field(None)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n