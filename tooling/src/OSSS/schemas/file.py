from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass FileBase(BaseModel):\n    storage_key: str = Field(...)\n    filename: str = Field(...)\n    size: Optional[int] = Field(None)\n    mime_type: Optional[str] = Field(None)\n    created_by: Optional[Any] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass FileCreate(BaseModel):\n    storage_key: str = Field(...)\n    filename: str = Field(...)\n    size: Optional[int] = Field(None)\n    mime_type: Optional[str] = Field(None)\n    created_by: Optional[Any] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass FileUpdate(BaseModel):\n    storage_key: Optional[str] = Field(...)\n    filename: Optional[str] = Field(...)\n    size: Optional[int] = Field(None)\n    mime_type: Optional[str] = Field(None)\n    created_by: Optional[Any] = Field(None)\n    id: Optional[Any] = Field(...)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass FileRead(BaseModel):\n    storage_key: str = Field(...)\n    filename: str = Field(...)\n    size: Optional[int] = Field(None)\n    mime_type: Optional[str] = Field(None)\n    created_by: Optional[Any] = Field(None)\n    id: Any = Field(...)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n