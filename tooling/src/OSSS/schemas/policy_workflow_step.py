from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass PolicyWorkflowStepBase(BaseModel):\n    workflow_id: Any = Field(...)\n    step_no: int = Field(...)\n    approver_type: str = Field(...)\n    approver_id: Optional[Any] = Field(None)\n    rule: Optional[str] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass PolicyWorkflowStepCreate(BaseModel):\n    workflow_id: Any = Field(...)\n    step_no: int = Field(...)\n    approver_type: str = Field(...)\n    approver_id: Optional[Any] = Field(None)\n    rule: Optional[str] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass PolicyWorkflowStepUpdate(BaseModel):\n    workflow_id: Optional[Any] = Field(...)\n    step_no: Optional[int] = Field(...)\n    approver_type: Optional[str] = Field(...)\n    approver_id: Optional[Any] = Field(None)\n    rule: Optional[str] = Field(None)\n    id: Optional[Any] = Field(...)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass PolicyWorkflowStepRead(BaseModel):\n    workflow_id: Any = Field(...)\n    step_no: int = Field(...)\n    approver_type: str = Field(...)\n    approver_id: Optional[Any] = Field(None)\n    rule: Optional[str] = Field(None)\n    id: Any = Field(...)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n