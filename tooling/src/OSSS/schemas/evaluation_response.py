from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass EvaluationResponseBase(BaseModel):\n    assignment_id: Any = Field(...)\n    question_id: Any = Field(...)\n    value_num: Optional[float] = Field(None)\n    value_text: Optional[str] = Field(None)\n    comment: Optional[str] = Field(None)\n    answered_at: Optional[datetime] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EvaluationResponseCreate(BaseModel):\n    assignment_id: Any = Field(...)\n    question_id: Any = Field(...)\n    value_num: Optional[float] = Field(None)\n    value_text: Optional[str] = Field(None)\n    comment: Optional[str] = Field(None)\n    answered_at: Optional[datetime] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EvaluationResponseUpdate(BaseModel):\n    assignment_id: Optional[Any] = Field(...)\n    question_id: Optional[Any] = Field(...)\n    value_num: Optional[float] = Field(None)\n    value_text: Optional[str] = Field(None)\n    comment: Optional[str] = Field(None)\n    answered_at: Optional[datetime] = Field(None)\n    id: Optional[Any] = Field(...)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EvaluationResponseRead(BaseModel):\n    assignment_id: Any = Field(...)\n    question_id: Any = Field(...)\n    value_num: Optional[float] = Field(None)\n    value_text: Optional[str] = Field(None)\n    comment: Optional[str] = Field(None)\n    answered_at: Optional[datetime] = Field(None)\n    id: Any = Field(...)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n