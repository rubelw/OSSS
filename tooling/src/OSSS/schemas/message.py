from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass MessageBase(BaseModel):\n    sender_id: Optional[Any] = Field(None)\n    channel: str = Field(...)\n    subject: Optional[str] = Field(None)\n    body: Optional[str] = Field(None)\n    sent_at: Optional[datetime] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass MessageCreate(BaseModel):\n    sender_id: Optional[Any] = Field(None)\n    channel: str = Field(...)\n    subject: Optional[str] = Field(None)\n    body: Optional[str] = Field(None)\n    sent_at: Optional[datetime] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass MessageUpdate(BaseModel):\n    sender_id: Optional[Any] = Field(None)\n    channel: Optional[str] = Field(...)\n    subject: Optional[str] = Field(None)\n    body: Optional[str] = Field(None)\n    sent_at: Optional[datetime] = Field(None)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    id: Optional[Any] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass MessageRead(BaseModel):\n    sender_id: Optional[Any] = Field(None)\n    channel: str = Field(...)\n    subject: Optional[str] = Field(None)\n    body: Optional[str] = Field(None)\n    sent_at: Optional[datetime] = Field(None)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n