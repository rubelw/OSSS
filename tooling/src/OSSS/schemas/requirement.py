from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass RequirementBase(BaseModel):\n    state_code: str = Field(...)\n    title: str = Field(...)\n    category: Optional[str] = Field(None)\n    description: Optional[str] = Field(None)\n    effective_date: Optional[date] = Field(None)\n    reference_url: Optional[str] = Field(None)\n    attributes: Optional[Any] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass RequirementCreate(BaseModel):\n    state_code: str = Field(...)\n    title: str = Field(...)\n    category: Optional[str] = Field(None)\n    description: Optional[str] = Field(None)\n    effective_date: Optional[date] = Field(None)\n    reference_url: Optional[str] = Field(None)\n    attributes: Optional[Any] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass RequirementUpdate(BaseModel):\n    state_code: Optional[str] = Field(...)\n    title: Optional[str] = Field(...)\n    category: Optional[str] = Field(None)\n    description: Optional[str] = Field(None)\n    effective_date: Optional[date] = Field(None)\n    reference_url: Optional[str] = Field(None)\n    attributes: Optional[Any] = Field(None)\n    created_at: Optional[Any] = Field(None)\n    id: Optional[Any] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass RequirementRead(BaseModel):\n    state_code: str = Field(...)\n    title: str = Field(...)\n    category: Optional[str] = Field(None)\n    description: Optional[str] = Field(None)\n    effective_date: Optional[date] = Field(None)\n    reference_url: Optional[str] = Field(None)\n    attributes: Optional[Any] = Field(None)\n    created_at: Optional[Any] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n