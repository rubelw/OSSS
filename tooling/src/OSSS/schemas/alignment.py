from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass AlignmentBase(BaseModel):\n    curriculum_version_id: Any = Field(...)\n    requirement_id: Any = Field(...)\n    alignment_level: str = Field(...)\n    evidence_url: Optional[str] = Field(None)\n    notes: Optional[str] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass AlignmentCreate(BaseModel):\n    curriculum_version_id: Any = Field(...)\n    requirement_id: Any = Field(...)\n    alignment_level: str = Field(...)\n    evidence_url: Optional[str] = Field(None)\n    notes: Optional[str] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass AlignmentUpdate(BaseModel):\n    curriculum_version_id: Optional[Any] = Field(...)\n    requirement_id: Optional[Any] = Field(...)\n    alignment_level: Optional[str] = Field(...)\n    evidence_url: Optional[str] = Field(None)\n    notes: Optional[str] = Field(None)\n    created_at: Optional[Any] = Field(None)\n    id: Optional[Any] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass AlignmentRead(BaseModel):\n    curriculum_version_id: Any = Field(...)\n    requirement_id: Any = Field(...)\n    alignment_level: str = Field(...)\n    evidence_url: Optional[str] = Field(None)\n    notes: Optional[str] = Field(None)\n    created_at: Optional[Any] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n