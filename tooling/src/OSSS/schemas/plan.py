from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass PlanBase(BaseModel):\n    org_id: Any = Field(...)\n    name: str = Field(...)\n    cycle_start: Optional[date] = Field(None)\n    cycle_end: Optional[date] = Field(None)\n    status: Optional[str] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass PlanCreate(BaseModel):\n    org_id: Any = Field(...)\n    name: str = Field(...)\n    cycle_start: Optional[date] = Field(None)\n    cycle_end: Optional[date] = Field(None)\n    status: Optional[str] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass PlanUpdate(BaseModel):\n    org_id: Optional[Any] = Field(...)\n    name: Optional[str] = Field(...)\n    cycle_start: Optional[date] = Field(None)\n    cycle_end: Optional[date] = Field(None)\n    status: Optional[str] = Field(None)\n    id: Optional[Any] = Field(...)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass PlanRead(BaseModel):\n    org_id: Any = Field(...)\n    name: str = Field(...)\n    cycle_start: Optional[date] = Field(None)\n    cycle_end: Optional[date] = Field(None)\n    status: Optional[str] = Field(None)\n    id: Any = Field(...)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n