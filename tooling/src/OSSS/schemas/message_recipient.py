from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass MessageRecipientBase(BaseModel):\n    id: Any = Field(...)\n    message_id: Any = Field(...)\n    person_id: Any = Field(...)\n    delivery_status: Optional[str] = Field(None)\n    delivered_at: Optional[datetime] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass MessageRecipientCreate(BaseModel):\n    message_id: Any = Field(...)\n    person_id: Any = Field(...)\n    delivery_status: Optional[str] = Field(None)\n    delivered_at: Optional[datetime] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass MessageRecipientUpdate(BaseModel):\n    id: Optional[Any] = Field(...)\n    message_id: Optional[Any] = Field(...)\n    person_id: Optional[Any] = Field(...)\n    delivery_status: Optional[str] = Field(None)\n    delivered_at: Optional[datetime] = Field(None)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass MessageRecipientRead(BaseModel):\n    id: Any = Field(...)\n    message_id: Any = Field(...)\n    person_id: Any = Field(...)\n    delivery_status: Optional[str] = Field(None)\n    delivered_at: Optional[datetime] = Field(None)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n