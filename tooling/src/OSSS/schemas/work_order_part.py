from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass WorkOrderPartBase(BaseModel):\n    work_order_id: Any = Field(...)\n    part_id: Optional[Any] = Field(None)\n    qty: float = Field(...)\n    unit_cost: Optional[float] = Field(None)\n    extended_cost: Optional[float] = Field(None)\n    notes: Optional[str] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass WorkOrderPartCreate(BaseModel):\n    work_order_id: Any = Field(...)\n    part_id: Optional[Any] = Field(None)\n    qty: float = Field(...)\n    unit_cost: Optional[float] = Field(None)\n    extended_cost: Optional[float] = Field(None)\n    notes: Optional[str] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass WorkOrderPartUpdate(BaseModel):\n    work_order_id: Optional[Any] = Field(...)\n    part_id: Optional[Any] = Field(None)\n    qty: Optional[float] = Field(...)\n    unit_cost: Optional[float] = Field(None)\n    extended_cost: Optional[float] = Field(None)\n    notes: Optional[str] = Field(None)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    id: Optional[Any] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass WorkOrderPartRead(BaseModel):\n    work_order_id: Any = Field(...)\n    part_id: Optional[Any] = Field(None)\n    qty: float = Field(...)\n    unit_cost: Optional[float] = Field(None)\n    extended_cost: Optional[float] = Field(None)\n    notes: Optional[str] = Field(None)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n