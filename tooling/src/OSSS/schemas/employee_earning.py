from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass EmployeeEarningBase(BaseModel):\n    run_id: Any = Field(...)\n    employee_id: Any = Field(...)\n    earning_code_id: Any = Field(...)\n    hours: Optional[float] = Field(None)\n    rate: Optional[float] = Field(None)\n    amount: float = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EmployeeEarningCreate(BaseModel):\n    run_id: Any = Field(...)\n    employee_id: Any = Field(...)\n    earning_code_id: Any = Field(...)\n    hours: Optional[float] = Field(None)\n    rate: Optional[float] = Field(None)\n    amount: float = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EmployeeEarningUpdate(BaseModel):\n    run_id: Optional[Any] = Field(...)\n    employee_id: Optional[Any] = Field(...)\n    earning_code_id: Optional[Any] = Field(...)\n    hours: Optional[float] = Field(None)\n    rate: Optional[float] = Field(None)\n    amount: Optional[float] = Field(...)\n    id: Optional[Any] = Field(...)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EmployeeEarningRead(BaseModel):\n    run_id: Any = Field(...)\n    employee_id: Any = Field(...)\n    earning_code_id: Any = Field(...)\n    hours: Optional[float] = Field(None)\n    rate: Optional[float] = Field(None)\n    amount: float = Field(...)\n    id: Any = Field(...)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n