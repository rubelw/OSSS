from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass ScanResultBase(BaseModel):\n    ok: bool = Field(...)\n    ticket_id: Optional[Any] = Field(None)\n    status: Optional[str] = Field(None)\n    message: str = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass ScanResultCreate(BaseModel):\n    ok: bool = Field(...)\n    ticket_id: Optional[Any] = Field(None)\n    status: Optional[str] = Field(None)\n    message: str = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass ScanResultUpdate(BaseModel):\n    ok: Optional[bool] = Field(...)\n    ticket_id: Optional[Any] = Field(None)\n    status: Optional[str] = Field(None)\n    message: Optional[str] = Field(...)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    id: Optional[Any] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass ScanResultRead(BaseModel):\n    ok: bool = Field(...)\n    ticket_id: Optional[Any] = Field(None)\n    status: Optional[str] = Field(None)\n    message: str = Field(...)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n