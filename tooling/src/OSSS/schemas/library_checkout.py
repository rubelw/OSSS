from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass LibraryCheckoutBase(BaseModel):\n    item_id: Any = Field(...)\n    person_id: Any = Field(...)\n    checked_out_on: date = Field(...)\n    due_on: date = Field(...)\n    returned_on: Optional[date] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass LibraryCheckoutCreate(BaseModel):\n    item_id: Any = Field(...)\n    person_id: Any = Field(...)\n    checked_out_on: date = Field(...)\n    due_on: date = Field(...)\n    returned_on: Optional[date] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass LibraryCheckoutUpdate(BaseModel):\n    item_id: Optional[Any] = Field(...)\n    person_id: Optional[Any] = Field(...)\n    checked_out_on: Optional[date] = Field(...)\n    due_on: Optional[date] = Field(...)\n    returned_on: Optional[date] = Field(None)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    id: Optional[Any] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass LibraryCheckoutRead(BaseModel):\n    item_id: Any = Field(...)\n    person_id: Any = Field(...)\n    checked_out_on: date = Field(...)\n    due_on: date = Field(...)\n    returned_on: Optional[date] = Field(None)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n