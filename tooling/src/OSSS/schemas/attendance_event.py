from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass AttendanceEventBase(BaseModel):\n    student_id: Any = Field(...)\n    section_meeting_id: Optional[Any] = Field(None)\n    date: date = Field(...)\n    code: str = Field(...)\n    minutes: Optional[int] = Field(None)\n    notes: Optional[str] = Field(None)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass AttendanceEventCreate(BaseModel):\n    student_id: Any = Field(...)\n    section_meeting_id: Optional[Any] = Field(None)\n    date: date = Field(...)\n    code: str = Field(...)\n    minutes: Optional[int] = Field(None)\n    notes: Optional[str] = Field(None)\n    model_config = ConfigDict(from_attributes=True)\n\nclass AttendanceEventUpdate(BaseModel):\n    student_id: Optional[Any] = Field(...)\n    section_meeting_id: Optional[Any] = Field(None)\n    date: Optional[date] = Field(...)\n    code: Optional[str] = Field(...)\n    minutes: Optional[int] = Field(None)\n    notes: Optional[str] = Field(None)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    id: Optional[Any] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass AttendanceEventRead(BaseModel):\n    student_id: Any = Field(...)\n    section_meeting_id: Optional[Any] = Field(None)\n    date: date = Field(...)\n    code: str = Field(...)\n    minutes: Optional[int] = Field(None)\n    notes: Optional[str] = Field(None)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    id: Any = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n