from __future__ import annotations\nfrom typing import Optional, Any, List, Dict, Union\nfrom datetime import datetime, date\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass EntityTagBase(BaseModel):\n    id: UUID = Field(...)\n    entity_type: str = Field(...)\n    entity_id: UUID = Field(...)\n    tag_id: UUID = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EntityTagCreate(BaseModel):\n    entity_type: str = Field(...)\n    entity_id: UUID = Field(...)\n    tag_id: UUID = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EntityTagUpdate(BaseModel):\n    id: Optional[UUID] = Field(...)\n    entity_type: Optional[str] = Field(...)\n    entity_id: Optional[UUID] = Field(...)\n    tag_id: Optional[UUID] = Field(...)\n    created_at: Optional[datetime] = Field(...)\n    updated_at: Optional[datetime] = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n\nclass EntityTagRead(BaseModel):\n    id: UUID = Field(...)\n    entity_type: str = Field(...)\n    entity_id: UUID = Field(...)\n    tag_id: UUID = Field(...)\n    created_at: datetime = Field(...)\n    updated_at: datetime = Field(...)\n    model_config = ConfigDict(from_attributes=True)\n