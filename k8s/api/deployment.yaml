apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
        - name: api
          image: osss-api:dev
          imagePullPolicy: IfNotPresent
          env:
            - name: PORT
              valueFrom: { configMapKeyRef: { name: osss-config, key: API_PORT } }
            - name: DATABASE_URL
              value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DB)"
            - name: POSTGRES_USER
              valueFrom: { configMapKeyRef: { name: osss-config, key: POSTGRES_USER } }
            - name: POSTGRES_PASSWORD
              valueFrom: { secretKeyRef: { name: osss-secrets, key: POSTGRES_PASSWORD } }
            - name: POSTGRES_HOST
              valueFrom: { configMapKeyRef: { name: osss-config, key: POSTGRES_HOST } }
            - name: POSTGRES_PORT
              valueFrom: { configMapKeyRef: { name: osss-config, key: POSTGRES_PORT } }
            - name: POSTGRES_DB
              valueFrom: { configMapKeyRef: { name: osss-config, key: POSTGRES_DB } }
            - name: REDIS_HOST
              valueFrom: { configMapKeyRef: { name: osss-config, key: REDIS_HOST } }
            - name: REDIS_PORT
              valueFrom: { configMapKeyRef: { name: osss-config, key: REDIS_PORT } }
            - name: KEYCLOAK_URL
              valueFrom: { configMapKeyRef: { name: osss-config, key: KEYCLOAK_URL } }
            - name: KEYCLOAK_REALM
              valueFrom: { configMapKeyRef: { name: osss-config, key: KEYCLOAK_REALM } }
          ports:
            - containerPort: 8081
              name: http
          readinessProbe:
            httpGet: { path: /healthz, port: http }
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet: { path: /healthz, port: http }
            initialDelaySeconds: 15
            periodSeconds: 20
